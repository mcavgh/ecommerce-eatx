version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-myapp_db}
      POSTGRES_USER: ${DB_USER:-myuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mypassword}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  backend:
    image: ghcr.io/martinch92/postgress-docker-compose-backend:latest
    container_name: nodejs_backend
    restart: always
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-myapp_db}
      - DB_USER=${DB_USER:-myuser}
      - DB_PASSWORD=${DB_PASSWORD:-mypassword}
      - PORT=3001
    depends_on:
      - postgres
    networks:
      - app-network

  frontend:
    image: ghcr.io/martinch92/postgress-docker-compose-frontend:latest
    build: 
      context: ./frontend
      args:
        REACT_APP_API_URL: "http://161.35.59.121:3001"
    container_name: react_frontend
    platform: linux/amd64
    restart: always
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=${API_URL:-http://161.35.59.121:3001}
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge