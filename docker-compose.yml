
services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: myapp_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # Backend Node.js
  backend:
    build: ./backend
    container_name: nodejs_backend
    restart: always
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=myapp_db
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - PORT=3001
    depends_on:
      - postgres
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

  # Frontend React
  frontend:
    build: 
      context: ./frontend
      args:
        REACT_APP_API_URL: "http://161.35.59.121:3001"
    container_name: react_frontend
    restart: always
    ports:
      - "3000:80"  # Cambiar puerto interno a 80
    environment:
      - REACT_APP_API_URL=http://161.35.59.121:3001
    depends_on:
      - backend
    networks:
      - app-network
    # Remover vol√∫menes de desarrollo
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules

  # pgAdmin para administrar la BD
  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   restart: always
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   ports:
  #     - "8080:80"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge